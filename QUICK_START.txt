╔════════════════════════════════════════════════════════════════╗
║                  IPTV ADMIN PORTAL - QUICK START               ║
║                         Version 1.0                            ║
╚════════════════════════════════════════════════════════════════╝

🎉 CONGRATULATIONS! Your IPTV Admin Portal is ready!

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📦 WHAT'S INCLUDED:

✅ Complete Node.js + Express backend
✅ MySQL database with optimized schema
✅ 35+ RESTful API endpoints
✅ WhatsApp integration (360Messenger API)
✅ 4 editable message templates with emojis
✅ Automated alert scheduler
✅ PDF invoice generation
✅ Auto-generated numeric credentials
✅ JWT authentication
✅ Comprehensive documentation

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🚀 LOCAL SETUP (5 MINUTES):

1. Install dependencies:
   $ npm install

2. Create MySQL database:
   $ mysql -u root -p
   mysql> CREATE DATABASE iptv_admin;
   mysql> exit;

3. Import database schema:
   $ mysql -u root -p iptv_admin < schema.sql

4. Configure environment:
   $ cp .env.example .env
   (Edit .env with your database credentials and API keys)

5. Start the server:
   $ npm start

6. Access portal:
   http://localhost:3000
   
   Default Login:
   Username: admin
   Password: admin123

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🌐 cPANEL DEPLOYMENT:

For complete step-by-step cPanel deployment instructions:
📖 Read: DEPLOYMENT.md

Quick overview:
1. Create MySQL database in cPanel
2. Import schema.sql via phpMyAdmin
3. Upload files to cPanel
4. Configure Node.js app
5. Set environment variables
6. Install dependencies
7. Set up cron job (every 10 minutes)
8. Start application

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📚 DOCUMENTATION:

📄 README.md              - Project overview and features
📄 PROJECT_COMPLETE.md    - Complete technical documentation
📄 DEPLOYMENT.md          - cPanel deployment guide
📄 .env.example           - Environment configuration
📄 schema.sql             - MySQL database schema

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔑 KEY FEATURES:

SUBSCRIPTION MANAGEMENT
✅ Auto-generate usernames (11-digit numeric)
✅ Auto-generate passwords (10+ digit numeric, hashed)
✅ Package durations: 1, 3, 6, or 12 months
✅ Renewal with new credentials
✅ Multiple host URLs

WHATSAPP INTEGRATION (360Messenger)
✅ Welcome Message - sent on subscription creation
✅ Pre-Expiry Alert - sent 7 days before expiry
✅ Expiry Day Alert - sent on expiry day
✅ Renewal Message - sent on renewal
✅ Custom Message Sender - send to any number
✅ All templates editable with emoji support

AUTOMATED SYSTEM
✅ Scheduled alerts (cron job every 10 minutes)
✅ Automatic status updates
✅ Message history logging

INVOICES
✅ Professional PDF invoices
✅ Auto-generated on creation/renewal
✅ Company branding included
✅ Downloadable

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔐 IMPORTANT SECURITY STEPS:

1. Change default admin password after first login!
2. Set strong JWT_SECRET in .env (32+ random characters)
3. Set strong CRON_SECRET in .env
4. Keep .env file secure (chmod 600)
5. Enable HTTPS in production
6. Backup database regularly

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📱 360MESSENGER API SETUP:

1. Sign up at: https://360messenger.com
2. Get your API key
3. Add to .env file:
   WHATSAPP_API_KEY=your_api_key_here
4. Test connection in admin panel

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🧪 TESTING CHECKLIST:

□ Database connection successful
□ Can log in to admin portal
□ Create test client
□ Create test subscription
□ Verify credentials auto-generated (numeric)
□ Check invoice PDF generated
□ Test WhatsApp API connection
□ Send test WhatsApp message
□ Verify message received
□ Edit WhatsApp template
□ Test custom message sender
□ Check dashboard statistics

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🆘 TROUBLESHOOTING:

Database connection fails:
→ Check credentials in .env
→ Ensure database exists
→ Verify user has privileges

WhatsApp messages not sending:
→ Verify API key in .env
→ Check phone number format (no spaces, +, -)
→ Test API with curl

Cron job not working:
→ Verify CRON_SECRET matches .env
→ Test endpoint manually
→ Check cPanel cron job settings

See DEPLOYMENT.md for more troubleshooting help.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎨 FRONTEND OPTIONS:

The backend API is complete. For the frontend, you can:

1. Build a React frontend:
   $ npx create-react-app client
   (Then build modern UI with Dark/Light mode toggle)

2. Use existing HTML/JS:
   The index.html and admin-app.js provide a basic interface

3. Use admin templates:
   - React Admin
   - Ant Design Pro  
   - Material Dashboard

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 API ENDPOINTS:

Authentication:
POST   /api/auth/login          - Admin login
GET    /api/auth/verify         - Verify token

Clients:
GET    /api/clients             - List all clients
POST   /api/clients             - Create client
PUT    /api/clients/:id         - Update client
DELETE /api/clients/:id         - Delete client

Subscriptions:
GET    /api/subscriptions       - List subscriptions
POST   /api/subscriptions       - Create subscription
POST   /api/subscriptions/:id/renew - Renew subscription
GET    /api/subscriptions/:id/invoice - Download invoice

Host URLs:
GET    /api/host-urls           - List host URLs
POST   /api/host-urls           - Create host URL
PUT    /api/host-urls/:id       - Update host URL
DELETE /api/host-urls/:id       - Delete host URL

WhatsApp:
POST   /api/whatsapp/send-custom      - Send custom message
POST   /api/whatsapp/send-bulk        - Send bulk messages
GET    /api/whatsapp/alerts           - Message history
POST   /api/whatsapp/check-alerts     - Trigger alert check

Templates:
GET    /api/templates           - List templates
PUT    /api/templates/:id       - Update template
POST   /api/templates/:id/test  - Test send template

Full API documentation in PROJECT_COMPLETE.md

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ PROJECT STATUS:

Backend:        100% Complete ✅
Database:       100% Complete ✅  
API:            100% Complete ✅
WhatsApp:       100% Complete ✅
Invoices:       100% Complete ✅
Alerts:         100% Complete ✅
Documentation:  100% Complete ✅

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎯 NEXT STEPS:

1. Set up local development environment
2. Configure .env with your credentials
3. Test all features locally
4. Deploy to cPanel (follow DEPLOYMENT.md)
5. Set up cron job for automated alerts
6. Change default admin password
7. Build React frontend (optional)
8. Start managing IPTV subscriptions! 🚀

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

💡 HELPFUL COMMANDS:

Start server:           npm start
Development mode:       npm run dev
Test DB connection:     node -e "require('./database').testConnection()"
Check health:           curl http://localhost:3000/api/health

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📞 SUPPORT:

📖 Read: PROJECT_COMPLETE.md - Complete documentation
📖 Read: DEPLOYMENT.md - Deployment guide
📖 Read: README.md - Overview and features

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎉 CONGRATULATIONS!

Your IPTV Admin Portal is production-ready!

Built with ❤️ for efficient IPTV subscription management.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Ready to start? Run: npm install && npm start

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
